{"id": 1, "ground_truth": 1200, "question": "The problem involves optimizing the total profit based on production or usage decisions for a set of elements, each with associated profits, coefficients affecting the production or usage cost, and upper bounds on their levels. Consider a problem where we have ElementNum elements. For each element j, we have a parameter CoefficientA_j, a parameter ProfitCoefficientC_j, and a parameter UpperBoundU_j. We also have a global parameter GlobalParameterB. We have a variable DecisionVariableX_j for each element j. The goal is to maximize the total profit, which is the sum of ProfitCoefficientC_j * DecisionVariableX_j for all element j. The constraints are that the sum of (1/CoefficientA_j) * DecisionVariableX_j for all element j should be less than or equal to GlobalParameterB, and DecisionVariableX_j should be between 0 and UpperBoundU_j for all element j. The set of elements is 2. A coefficient parameter for each element in the set is [200, 140]. Profit coefficient for each element in the set is [25, 30]. Upper bound on the decision variable for each element in the set is [6000, 4000]. A global parameter representing an upper limit on the weighted sum of decision variables is 40.  The sum of the inverses of CoefficientA_j multiplied by DecisionVariableX_j for all elements in ElementNum must be less than or equal to GlobalParameterB. Each DecisionVariableX_j is greater than or equal to 0. Each DecisionVariableX_j is less than or equal to its respective UpperBoundU_j.  Maximize the total profit, which is the sum of the product of ProfitCoefficientC_j and DecisionVariableX_j for all elements in ElementNum. "}
{"id": 2, "ground_truth": 85342, "question": "The capacitated warehouse location problem involves determining the optimal locations for a set number of warehouses to service customers at minimum cost, taking into account warehouse capacities, operating costs, and customer demand. The capacitated warehouse location problem is the problem of locating NumberOfLocations warehouses which have to service NumberOfCustomers customers, at minimum cost. Each customer has an associated demand CustomerDemand. There are constraints on the total demand that can be met from a warehouse, as specified by WarehouseCapacity. Costs are incurred when allocating service to customers from warehouses ServiceAllocationCost, and warehouses have a fixed operating cost WarehouseFixedCost. Additionally, there is a lower limit MinimumDemandFromWarehouse on the amount of demand that a warehouse must meet if it is opened, as well as constraints on the minimum MinimumOpenWarehouses and maximum MaximumOpenWarehouses number of warehouses that can be operational. The total number of potential warehouse locations is 10. The total number of customers to be serviced is 20. The demand of each customer is [117, 86, 69, 53, 110, 74, 136, 140, 126, 79, 54, 86, 114, 76, 136, 73, 144, 51, 53, 120]. The cost of allocating service from each warehouse to each customer is [[80, 94, 44, 51, 190, 44, 129, 178, 129, 91, 172, 119, 177, 150, 90, 51, 53, 97, 184, 87], [139, 33, 104, 135, 50, 176, 97, 121, 47, 29, 186, 163, 149, 108, 156, 169, 100, 160, 153, 85], [153, 36, 18, 170, 18, 181, 178, 68, 171, 106, 159, 110, 21, 106, 91, 29, 144, 140, 155, 116], [103, 59, 78, 125, 14, 11, 152, 95, 76, 173, 36, 148, 75, 132, 59, 153, 113, 74, 185, 71], [193, 186, 130, 145, 114, 150, 33, 154, 20, 75, 103, 30, 137, 131, 167, 32, 53, 150, 176, 166], [159, 130, 156, 65, 36, 59, 199, 124, 104, 72, 180, 73, 43, 152, 143, 90, 161, 65, 172, 141], [173, 121, 110, 127, 22, 159, 195, 137, 47, 10, 87, 11, 154, 66, 126, 60, 152, 54, 20, 25], [181, 34, 186, 152, 109, 195, 133, 198, 30, 65, 69, 19, 109, 143, 108, 196, 59, 133, 10, 123], [82, 113, 147, 21, 88, 24, 38, 16, 70, 122, 148, 192, 116, 108, 18, 20, 143, 18, 116, 142], [176, 170, 87, 91, 195, 183, 124, 89, 72, 97, 89, 23, 45, 196, 97, 27, 83, 81, 171, 148]]. The total capacity for each warehouse is [3010, 2910, 4530, 4720, 4920, 3750, 4930, 2970, 3310, 2460]. The lower limit on the demand that must be met from a warehouse if it is to be operational is [64, 55, 27, 71, 93, 90, 89, 87, 43, 50]. The minimum number of warehouses that need to be operational is 3. The maximum number of warehouses that can be operational is 8. The fixed operating cost of each warehouse is [8517, 5068, 9433, 6127, 6033, 5966, 7762, 9406, 6602, 7040].  Each customer demand must be met. Each warehouse can meet a maximum demand equal to its WarehouseCapacity. If a warehouse is open, it must meet at least the MinimumDemandFromWarehouse. At least MinimumOpenWarehouses warehouses must be operational. At most MaximumOpenWarehouses warehouses can be operational.  Minimize the total cost of servicing customers, including service allocation and operating costs of warehouses. "}
{"id": 3, "ground_truth": null, "question": "The Aircraft Landing Problem involves scheduling aircraft to land on runways within specified time windows while adhering to separation time criteria between consecutive landings to ensure safety. The Aircraft Landing Problem (ALP) is the problem of deciding a landing time on an appropriate runway for each aircraft in a given set of TotalAircrafts aircraft such that each aircraft lands within a predetermined time window defined by an EarliestLandingTime and a LatestLandingTime; and separation criteria between the landing of an aircraft i, and the landing of all successive aircraft j, are respected, determined by SeparationTimeMatrix. Each aircraft has a TargetLandingTime, and penalties are incurred for landing after (PenaltyTimeAfterTarget) or before (PenaltyTimeBeforeTarget) this target time. The total number of aircraft in the set is 10. The earliest landing time for each aircraft is [129, 195, 89, 90, 110, 120, 124, 126, 135, 160]. The latest landing time for each aircraft is [689, 653, 517, 501, 634, 603, 657, 592, 510, 604]. The target landing time for each aircraft is [155, 258, 98, 106, 123, 135, 138, 140, 150, 180]. The penalty incurred for each aircraft landing after the target time is [24, 25, 10, 13, 10, 20, 24, 12, 16, 27]. The penalty incurred for each aircraft landing before the target time is [24, 25, 10, 13, 10, 20, 24, 12, 16, 27]. The required separation time between the landing of aircraft i and aircraft j is [[99999, 11, 12, 10, 10, 11, 12, 12, 12, 10], [14, 99999, 10, 12, 12, 10, 13, 14, 11, 13], [11, 14, 99999, 10, 11, 12, 9, 10, 11, 13], [8, 10, 11, 99999, 8, 12, 8, 8, 9, 9], [10, 10, 14, 14, 99999, 10, 8, 14, 11, 10], [11, 9, 11, 11, 14, 99999, 9, 9, 9, 12], [12, 13, 13, 8, 14, 14, 99999, 8, 13, 11], [14, 8, 8, 14, 12, 8, 14, 99999, 8, 12], [11, 12, 11, 11, 13, 11, 11, 14, 99999, 9], [11, 9, 10, 10, 8, 14, 8, 14, 9, 99999]].  Each aircraft must land within its predetermined time window. Sufficient separation time must be maintained between consecutive aircraft landings as specified in the SeparationTimeMatrix.  Minimize the sum of penalties incurred for each aircraft landing before or after its TargetLandingTime. "}
{"id": 4, "ground_truth": null, "question": "The Vehicle Routing Problem with Time Windows (VRPTW) aims to optimize the distribution of goods between depots and customers using a fleet of vehicles with limited capacity, ensuring customers' demands are met within specific time windows while respecting the vehicles' routing restrictions. The Vehicle Routing Problem with Time Windows (VRPTW) involves the distribution of goods between depots and customers using VehicleCount vehicles. Each vehicle has to supply CustomerCount customers, and has a limited capacity, VehicleCapacity_i, for each vehicle i. Each customer, j, has an associated demand, CustomerDemand_j, that must be satisfied within the customer-specific time window, defined by the lower and upper bounds, CustomerLBTW_j and CustomerUBTW_j, respectively. The CustomerDistance_{i,j} parameter represents the distance between customer i to customer j, and CustomerServiceTime_j denotes the service time for customer j. The number of customers to be supplied is 10. The number of vehicles available for distribution is 3. The demand of each customer is [6, 1, 4, 4, 8, 10, 4, 6, 3, 5]. The lower bound of the time window for each customer is [87, 70, 88, 140, 58, 193, 39, 87, 174, 88]. The upper bound of the time window for each customer is [10500, 10800, 11400, 15400, 6700, 20300, 6000, 10400, 18000, 10400]. The distance from each customer to every other customer is [[0, 1, 19, 4, 18, 15, 8, 1, 2, 10], [1, 0, 4, 12, 19, 3, 1, 1, 5, 6], [7, 9, 0, 16, 5, 10, 11, 2, 2, 8], [10, 4, 7, 0, 15, 19, 1, 15, 4, 13], [11, 12, 5, 7, 0, 16, 4, 13, 5, 9], [15, 16, 4, 16, 14, 0, 18, 6, 10, 4], [1, 6, 1, 18, 19, 5, 0, 17, 4, 3], [11, 14, 17, 8, 10, 1, 11, 0, 12, 3], [3, 4, 4, 19, 15, 4, 18, 19, 0, 10], [2, 5, 11, 12, 9, 12, 3, 17, 1, 0]]. The service time required for each customer is [11, 8, 15, 8, 13, 13, 13, 7, 8, 7]. The capacity of each vehicle is [31, 33, 36].  The capacity of each vehicle i is limited to VehicleCapacity_i. Each customer j must be served within the time window from CustomerLBTW_j to CustomerUBTW_j. The number of vehicles available is limited to VehicleCount.  Optimize the routes for all vehicles such that all customer demands are fulfilled within their specific time windows while minimizing total travel distance and time. "}
{"id": 5, "ground_truth": 3030, "question": "The problem is focused on allocating goods from multiple origins to multiple destinations, considering the individual supply limits at each origin and demand requirements at each destination, with the goal of minimizing the total transportation cost. The optimization problem is focused on efficiently allocating goods from a set of origins, denoted by OriginNum, to a set of destinations, represented by DestinationNum. Each originating point has a certain supply of goods, Supply_i, where i is an origin. Correspondingly, each destination point has a specific demand, Demand_j, where j is a destination. The cost associated with sending goods from origin i to destination j is represented by Cost_{i,j}. The objective is to minimize the total transportation cost while meeting the demands at the destinations without exceeding the supplies at the origins. The total number of origins is 2. The total number of destinations is 4. The supply of goods available at each origin is [29, 49]. The demand for goods to be satisfied at each destination is [6, 28, 19, 23]. The cost of transporting goods from origin i to destination j is [[5, 10, 6, 3], [8, 5, 4, 7]].  Each origin i (where i is an index for origins) has a supply limit of Supply_i. Each destination j (where j is an index for destinations) requires Demand_j amount of goods. Amount of goods sent from any origin to any destination is non-negative.  Minimize the total transportation cost from origins to destinations. "}
{"id": 6, "ground_truth": 48, "question": "The Knapsack Problem involves selecting the most valuable combination of items to fit in a knapsack without exceeding its weight limit. The Knapsack Problem is a classic optimization problem in operations research and computer science. The problem is to determine the most valuable combination of items to include in a knapsack, given a set of TotalItems with different values and weights represented by ItemValues and ItemWeights respectively, and a maximum weight capacity of the knapsack MaxKnapsackWeight. The goal is to maximize the total value of the items in the knapsack, represented by ItemValues, without exceeding its weight capacity MaxKnapsackWeight. The total number of available items is 6. The value of each item is [17, 4, 10, 21, 12, 18]. The weight of each item is [23, 6, 14, 30, 15, 25]. The maximum weight capacity of the knapsack is 60.  The total weight of the selected items must not exceed MaxKnapsackWeight. Only non-negative quantities of each item can be selected. No more than TotalItems items can be considered for selection.  Maximize the total value of the items in the knapsack. "}
{"id": 7, "ground_truth": null, "question": "The problem involves shipping multiple products from various origins to multiple destinations, with the goal of minimizing the total shipping cost while meeting supply and demand constraints. This is a multi-commodity transportation problem. Given a set of origins OriginNum, a set of destinations DestinationNum, and a set of products ProductNum. Each origin i has a certain supply of each product p, Supply_{i,p}, and each destination j has a certain demand for each product p, Demand_{j,p}. The cost of shipping one unit of product p from origin i to destination j is Cost_{i, j, p}. The problem aims to minimize the total cost of shipping all products from the origins to the destinations. It is constrained that the total amount of each product p shipped from each origin i equals its supply, the total amount of each product p shipped to each destination j equals its demand, and the total amount of all products shipped from each origin i to each destination j does not exceed a certain limit Limit_{i,j}. The decision variable is the number of units of each product p to be shipped from each origin i to each destination j. The number of origins is 3. The number of destinations is 7. The number of products is 3. The supply of each product at each origin is [[400, 800, 200], [700, 1600, 300], [800, 1800, 300]]. The demand of each product at each destination is [[300, 300, 100, 75, 650, 225, 250], [500, 750, 400, 250, 950, 850, 500], [100, 100, 0, 50, 200, 100, 250]]. The limit on the total amount of all products shipped from each origin to each destination is [[625, 625, 625, 625, 625, 625, 625], [625, 625, 625, 625, 625, 625, 625], [625, 625, 625, 625, 625, 625, 625]]. The cost of shipping one unit of each product from each origin to each destination is [[[30, 39, 41], [10, 14, 15], [8, 11, 12], [10, 14, 16], [11, 16, 17], [71, 82, 86], [6, 8, 8]], [[22, 27, 29], [7, 9, 9], [10, 12, 13], [7, 9, 9], [21, 26, 28], [82, 95, 99], [13, 17, 18]], [[19, 24, 26], [11, 14, 14], [12, 17, 17], [10, 13, 13], [25, 28, 31], [83, 99, 104], [15, 20, 20]]].  For each origin i and product p, the total amount shipped equals the supply of that product at that origin: Supply_{i,p}. For each destination j and product p, the total amount received equals the demand for that product at that destination: Demand_{j,p}. For each origin i and destination j, the total amount of all products shipped does not exceed Limit_{i,j}. All shipping quantities are non-negative.  Minimize the total cost of shipping all products from the origins to the destinations. "}
{"id": 8, "ground_truth": null, "question": "A production problem involving a set of products being manufactured over multiple stages, where each product has a defined production rate per stage and profit margin, and each stage has limited available time. Consider a production problem. Given a set of products NumProducts and a set of stages NumStages. Each product p has a certain production rate ProductionRate_{p,s} in each stage s and a certain profit ProfitPerTon_p per ton. Each stage s has a certain number of hours StageAvailability_s available per week. There are also lower and upper limits on the tons of each product sold in a week, MinCommitment_p and MaxMarketLimit_p respectively. The problem aims to maximize the total profit from all products. It is constrained that the total number of hours used by all products in each stage s may not exceed the hours available. How to decide the number of tons to be produced for each product p? The number of different products is 3. The number of different stages is 2. The production rate of product p in stage s is [[200, 200], [200, 140], [200, 160]]. The profit per ton for each product is [25, 30, 29]. The minimum number of tons of product p that can be sold in a week is [1000, 500, 750]. The maximum market limit on the tons of product p sold in a week is [6000, 4000, 3500]. The number of hours available per week for each stage is [35, 40].  Number of tons of each product p is non-negative. Total hours used in each stage s by all products cannot exceed StageAvailability_s. Each product p has a minimum production commitment of MinCommitment_p tons per week. Each product p has a maximum market limit of MaxMarketLimit_p tons per week.  Maximize the total profit from all the products produced. "}
{"id": 9, "ground_truth": null, "question": "The problem involves determining the production quantity for a set of products in a week, given production rates, a profit per ton for each product, a limited number of available hours, and constraints on the minimum and maximum sales for each product. Consider a production problem. Given a set of products ProductNum. Each product p is produced at a rate of ProductionRate_p tons per hour. There are AvailableHours hours available in a week. The profit per ton for each product p is ProfitPerTon_p. There is a lower limit MinimumSale_p and an upper limit MaximumSale_p on the tons of each product p sold in a week. The problem aims to maximize the total profit from selling all products. It is constrained that the total of hours used by all products may not exceed the hours available. How to decide the tons of each product p to be produced? The number of products is 3. The production rate of each product in tons per hour is [200, 140, 160]. The profit per ton for each product is [25, 30, 29]. The lower limit on the tons of each product sold in a week is [1000, 500, 750]. The upper limit on the tons of each product sold in a week is [6000, 4000, 3500]. The total available hours in a week for production is 40.  Production quantity for each product p is non-negative. Total production hours for all products must not exceed AvailableHours. Each product p must be sold in amounts at least equal to MinimumSale_p tons. Each product p must be sold in amounts no more than MaximumSale_p tons.  Maximize the total profit from selling all products within the available hours and given sale constraints for each product. "}
{"id": 10, "ground_truth": 268, "question": "A set of jobs need to be processed on a set of machines in series, with each machine being able to work in parallel. Jobs must follow the same processing order through all machines, with the objective to minimize the total time to complete all jobs, known as the makespan. A set of JobCount jobs need to be processed on a set of MachineCount machines in series. All jobs have the same processing order through all the machines, from machine 1 to machine MachineCount. Each machine can work in parallel. The workflow is as follows: the first job of the sequence goes to the first machine to be processed; meanwhile, other jobs wait. When the first machine has processed the first job, it goes to the second machine, and the second job of the sequence starts to be processed by the first machine; this process continues in sequence. The time required to process job j on machine m is ProcessingTime_{j,m}. The problem aims to minimize the total makespan, which is the time when all jobs have been processed. The goal is to find a sequence of jobs that minimizes the makespan. The total number of jobs to be processed is 9. The total number of machines available for processing is 12. The time required to process job j on machine m is [[10, 18, 13, 10, 14, 3, 18, 15, 19, 13, 12, 13], [16, 18, 19, 5, 1, 7, 1, 19, 4, 18, 19, 11], [9, 2, 15, 7, 15, 4, 12, 16, 18, 15, 3, 19], [8, 16, 19, 2, 13, 9, 16, 13, 8, 5, 17, 15], [15, 2, 3, 3, 18, 12, 8, 11, 11, 14, 10, 12], [2, 17, 2, 2, 4, 19, 11, 15, 13, 12, 14, 5], [9, 2, 7, 10, 9, 7, 7, 14, 19, 10, 7, 14], [18, 19, 19, 13, 14, 3, 3, 3, 4, 7, 14, 10], [14, 4, 10, 16, 18, 6, 3, 2, 11, 10, 9, 4]].  All jobs follow the same order from Machine 1 to MachineCount. Each machine can process only one job at a time.  Minimize the total makespan, which is the time when the last job is completed on the last machine. "}
{"id": 11, "ground_truth": 88, "question": "This is a diet optimization problem involving the selection of a set of foods that meet nutritional needs within specified ranges while minimizing total cost. Consider a diet problem. Given a set of nutrients NutrientCount and a set of foods FoodCount. Each food j has a cost Cost_j and a range of amount that can be bought [FoodMin_j, FoodMax_j]. Each nutrient i has a range of amount that should be included in the diet [NutrientMin_i, NutrientMax_i]. The amount of nutrient i in food j is AmountNutrient_{i, j}. The problem aims to minimize the total cost of buying foods. It is constrained that the total amount of each nutrient i in the bought foods should be within its range. How to decide the amount of each food j to buy? The number of different nutrients is 4. The number of different foods is 8. The cost of each food item is [3.19, 2.59, 2.29, 2.89, 1.89, 1.99, 1.99, 2.49]. The minimum quantity of each food that can be bought is [0, 0, 0, 0, 0, 0, 0, 0]. The maximum quantity of each food that can be bought is [100, 100, 100, 100, 100, 100, 100, 100]. The minimum required quantity of each nutrient is [700, 700, 700, 700]. The maximum allowed quantity of each nutrient is [10000, 10000, 10000, 10000]. The amount of each nutrient in each food is [[60, 20, 10, 15], [8, 0, 20, 20], [8, 10, 15, 10], [40, 40, 35, 10], [15, 35, 15, 15], [70, 30, 15, 15], [25, 50, 25, 15], [60, 20, 15, 10]].  For each food j, the amount bought must be greater than or equal to FoodMin_j. For each food j, the amount bought must be less than or equal to FoodMax_j. For each nutrient i, the total amount must be greater than or equal to NutrientMin_i. For each nutrient i, the total amount must be less than or equal to NutrientMax_i. All food quantities must be non-negative.  Minimize the total cost of buying foods while ensuring that nutritional constraints are met. "}
{"id": 12, "ground_truth": 200, "question": "This is a transportation problem involving the transfer of goods from multiple origins to multiple destinations, each with their own supply and demand constraints, aiming to minimize the total transportation cost. This is a transportation problem where there are multiple origins NumberOfOrigins and destinations NumberOfDestinations. Each origin has a certain supply SupplyOfOrigin, and each destination has a certain demand DemandOfDestination. The goal is to minimize the total cost of transportation TransportationCost. The cost of transporting from an origin i to a destination j is given by CostPerUnit_{i,j}. The problem is subject to the constraints that the total supply from each origin and the total demand at each destination must be met. The total number of origins is 3. The total number of destinations is 7. The supply available at each origin is [1400, 2600, 2900]. The demand that needs to be satisfied at each destination is [900, 1200, 600, 400, 1700, 1100, 1000]. The cost of transporting a unit from each origin to each destination is [[39, 14, 11, 14, 16, 82, 8], [27, 9, 12, 9, 26, 95, 17], [24, 14, 17, 13, 28, 99, 20]].  Total supply from each origin must be exactly SupplyOfOrigin. Total demand at each destination must be exactly DemandOfDestination. Number of units transported from each origin i to each destination j is non-negative.  Minimize the total transportation cost. "}
{"id": 13, "ground_truth": 10.4, "question": "The problem involves blending different market alloys into a final product that meets certain elemental composition requirements at minimum cost. The goal is to minimize the price of an alloy produced from other alloys available on the market. There are AlloysOnMarket different alloys that can be bought to blend into the final product. The needed composition of the end alloy requires RequiredElements elements. Each alloy on the market has a known composition given by CompositionDataPercentage_{e,a}, which indicates the percentage of element e in alloy a. The desired percentage of each element in the final blend is specified by DesiredBlendPercentage_e. Furthermore, each alloy a on the market comes with a price AlloyPrice_a. The objective of the optimization problem is to determine the quantity of each available alloy that should be used to achieve the desired blend percentages at the minimum total cost, without exceeding the availability of the alloys. The number of different alloys available on the market is 9. The number of elements required in the desired alloy blend is 3. The composition data indicating the percentage of each required element in each available alloy is [[0.1, 0.1, 0.4, 0.6, 0.3, 0.3, 0.3, 0.5, 0.2], [0.1, 0.3, 0.5, 0.3, 0.3, 0.4, 0.2, 0.4, 0.3], [0.8, 0.6, 0.1, 0.1, 0.4, 0.3, 0.5, 0.1, 0.5]]. The desired percentage of each required element in the final alloy blend is [0.3, 0.3, 0.4]. The price of each alloy available on the market is [10, 16, 17, 17, 12, 12, 12, 11, 10].  Quantity of each alloy used is non-negative. Final blend must meet required percentages for each of the RequiredElements elements. Cannot exceed the availability of alloys on the market.  Minimize the total cost of producing the alloy with the desired blend percentages. "}
{"id": 14, "ground_truth": 2, "question": "This problem involves optimizing the number of raw rolls cut from a stock roll to meet specific width orders using various cutting patterns. This is a cutting stock problem. Given a roll of width RollWidth and a set of NumWidths widths Widths to be cut. Each width i has a certain number of orders Orders_i. There are NumPatterns patterns and each pattern j has a certain number of rolls of each width i NumRollsWidthPattern_{i,j}. The problem aims to minimize the total number of raw rolls cut. It is constrained that for each width i, the total number of rolls cut meets the total orders. The decision to be made concerns how to decide the number of rolls cut using each pattern j. The number of widths to be cut is 5. The total number of patterns is 3. The set of widths to be cut from the roll is [20, 45, 50, 55, 75]. The width of the raw roll is 110. The number of orders for each width is [48, 35, 24, 10, 8]. The number of rolls of each width i in each pattern j is [[10, 20, 30], [11, 21, 31], [12, 22, 32], [13, 23, 33], [14, 24, 34]].  Number of rolls cut for each width is non-negative. Total number of rolls cut for each width i must meet or exceed Orders_i. Number of rolls cut using each pattern j must be non-negative.  Minimize the total number of raw rolls cut to meet the orders. "}
{"id": 15, "ground_truth": null, "question": "Lot-sizing problems involve planning production across predefined periods with events such as orders or machine set-ups affecting costs and capacity where each item's demand, production capacity, and costs vary by period. Lot-sizing problems are production planning problems where Periods are predefined and production of an item during a Periods involves a discrete event such as the payment of a cost or the loss of production capacity. These events can occur due to the placement of an order or the set-up, startup, or changeover of a machine. The demand for each of the Items across each period is represented by Demand_{i,j}, while the total production capacity available in each period is defined by TotalPeriodCapacity_j. Each item has a specific capacity ItemCapacity_{i,j} which could decrease in each period due to mentioned events. Holding costs for items are indicated by HoldingCost_i, while backorder costs and fixed order costs are represented by BackorderCost_i and FixedCost_i, respectively. The initial stock of each item is provided by InitialStock_i. The number of distinct items is 8. The number of predefined periods is 8. The demand for each item across each period is [[59, 46, 141, 45, 93, 85, 94, 104], [75, 34, 135, 146, 16, 54, 33, 140], [22, 101, 97, 59, 103, 40, 24, 40], [105, 96, 156, 28, 87, 155, 29, 140], [44, 136, 76, 38, 94, 50, 14, 31], [76, 33, 160, 20, 160, 109, 79, 145], [69, 154, 109, 23, 105, 49, 25, 127], [54, 46, 157, 78, 103, 81, 137, 21]]. The total production capacity available in each period is [802, 689, 916, 804, 661, 692, 894, 719]. The specific production capacity of each item is [[146, 108, 105, 96, 102, 112, 126, 96], [110, 97, 139, 86, 112, 102, 138, 134], [127, 90, 105, 130, 125, 149, 124, 84], [93, 149, 99, 123, 96, 104, 148, 145], [142, 126, 140, 97, 148, 148, 148, 127], [85, 142, 134, 126, 143, 88, 110, 124], [110, 138, 117, 110, 136, 129, 120, 138], [88, 124, 99, 138, 110, 145, 102, 122]]. The holding cost for each item is [1, 1, 1, 1, 1, 1, 1, 1]. The backorder cost for each item is [2, 2, 2, 2, 2, 2, 2, 2]. The fixed order cost for each item is [100, 200, 200, 300, 400, 250, 500, 300]. The initial stock for each item is [0, 20, 10, 6, 3, 2, 1, 4].  Number of items produced must meet the demand for each item in each period. Total production must not exceed the available capacity for each period. Each item has a specific capacity that might decrease in each period. Production amounts, initial stock, and holding costs for each item are non-negative. Backorder costs and fixed order costs for each item are non-negative. Holding costs are incurred on any unsold stock carried over to subsequent periods. Backorder costs are incurred if the demand is not met on time. A fixed cost is incurred every time an order is placed or a machine is set-up or changed over.  Minimize the total cost of production, including holding costs, backorder costs, and fixed order costs, while satisfying the demand for each item across all periods. "}
{"id": 16, "ground_truth": null, "question": "Capacitated facility location problems focus on determining the optimal placement of a certain number of facilities to serve a set number of customers in a way that minimizes the total cost, considering fixed costs, capacities, customer demands, and transport costs. Capacitated facility location problems deal with locating NumberOfFacilities facilities to serve NumberOfCustomers customers, at minimum total cost. Considering potential facility locations and customer zones as fixed points in a network, each facility has a fixed FacilityFixedCost and a FacilityCapacity. Furthermore, there exists a CustomerDemand for each customer zone, and a FacilityToCustomerTransportCost representing the cost of transport between facilities and customer zones. The number of potential facilities that can be established is 10. The number of customer zones to be served is 20. The fixed cost associated with establishing a facility is [8517, 5068, 9433, 6127, 6033, 5966, 7762, 9406, 6602, 7040]. The cost of transporting goods from each facility to each customer zone is [[80, 94, 44, 51, 190, 44, 129, 178, 129, 91, 172, 119, 177, 150, 90, 51, 53, 97, 184, 87], [139, 33, 104, 135, 50, 176, 97, 121, 47, 29, 186, 163, 149, 108, 156, 169, 100, 160, 153, 85], [153, 36, 18, 170, 18, 181, 178, 68, 171, 106, 159, 110, 21, 106, 91, 29, 144, 140, 155, 116], [103, 59, 78, 125, 14, 11, 152, 95, 76, 173, 36, 148, 75, 132, 59, 153, 113, 74, 185, 71], [193, 186, 130, 145, 114, 150, 33, 154, 20, 75, 103, 30, 137, 131, 167, 32, 53, 150, 176, 166], [159, 130, 156, 65, 36, 59, 199, 124, 104, 72, 180, 73, 43, 152, 143, 90, 161, 65, 172, 141], [173, 121, 110, 127, 22, 159, 195, 137, 47, 10, 87, 11, 154, 66, 126, 60, 152, 54, 20, 25], [181, 34, 186, 152, 109, 195, 133, 198, 30, 65, 69, 19, 109, 143, 108, 196, 59, 133, 10, 123], [82, 113, 147, 21, 88, 24, 38, 16, 70, 122, 148, 192, 116, 108, 18, 20, 143, 18, 116, 142], [176, 170, 87, 91, 195, 183, 124, 89, 72, 97, 89, 23, 45, 196, 97, 27, 83, 81, 171, 148]]. The capacity of each facility, which limits the amount of goods the facility can handle or produce is [301, 291, 453, 472, 492, 375, 493, 297, 331, 246]. The demand of each customer zone that must be met by the facilities is [117, 86, 69, 53, 110, 74, 136, 140, 126, 79, 54, 86, 114, 76, 136, 73, 144, 51, 53, 120].  Each facility has a maximum capacity of FacilityCapacity. Total number of facilities to be located is NumberOfFacilities. Each customer zone is served by at least one facility and its demand must be met. Total output for each facility cannot exceed its capacity. The number of facilities and customers is fixed and non-negative.  Minimize the total cost of locating facilities and transporting goods to customer zones. "}
{"id": 17, "ground_truth": null, "question": "The Aircraft Assignment Problem involves assigning a given number of aircraft to specified routes with the goal of minimizing the total operational cost while adhering to aircraft availability limits and route demand requirements. The Aircraft Assignment Problem is a mathematical programming model that aims to assign TotalAircraft aircraft to TotalRoutes routes in order to minimize the total cost while satisfying availability and demand constraints. The availability for each aircraft i is Availability_i and it represents the maximum number of routes that the aircraft can be assigned to. The demand for each route j is Demand_j and it denotes the number of aircraft required to fulfill the passenger or cargo needs of the route. The capability of each aircraft i for each route j is given by Capacity_{i,j} and it defines whether the aircraft can service the route, considering factors such as range, size, and suitability. Finally, Cost_{i,j} represents the cost of assigning aircraft i to route j, which includes operational, fuel, and potential opportunity costs. The total number of aircraft available for assignment is 5. The total number of routes that require aircraft assignment is 5. The availability of each aircraft, indicating the maximum number of routes it can be assigned to is [10, 19, 25, 15, 0]. The demand for each route, indicating the number of aircraft required is [250, 120, 180, 90, 600]. The capacity matrix defining the suitability and capability of each aircraft for each route is [[16, 15, 28, 23, 81], [0, 10, 14, 15, 57], [0, 5, 0, 7, 29], [9, 11, 22, 17, 55], [1, 1, 1, 1, 1]]. The cost matrix representing the cost of assigning each aircraft to each route is [[17, 5, 18, 17, 7], [15, 20, 9, 5, 18], [15, 13, 8, 5, 19], [13, 14, 6, 16, 8], [13, 14, 14, 10, 7]].  Each aircraft can be assigned to at most its individual availability. Each route must have at least the required number of aircraft to meet its demand. An aircraft can be assigned to a route only if it has the capacity for that route (Capacity_{i,j} must indicate suitability). Number of aircraft assigned to a route must be an integer. Number of aircraft assigned to each route is non-negative. Total number of aircraft assigned must not exceed TotalAircraft.  Minimize the total cost of assigning aircraft to routes. "}
{"id": 18, "ground_truth": 38.64, "question": "The problem involves selecting a combination of foods from a set that meets certain nutritional requirements while minimizing the total cost. The nutrients have individual minimum and maximum required amounts to be satisfied in the diet. Consider a diet problem. Given a set of FoodNum foods and a set of NutrientNum. Each food j has a cost CostPerFood_j and the amount of each nutrient i it contains is AmountPerNutrient_{i,j}. The problem aims to minimize the total cost of buying foods. It is constrained that the total amount of each nutrient i with minimum requirements in the foods bought is at least MinReqAmount_i and the total amount of each nutrient i with maximum requirements in the foods bought is at most MaxReqAmount_i. How to decide the amount of each food j to buy ? The number of foods is 8. The number of nutrients is 6. The cost of each food item is [3.19, 2.59, 2.29, 2.89, 1.89, 1.99, 1.99, 2.49]. The minimum quantity of each food that can be bought is [2, 2, 2, 2, 2, 2, 2, 2]. The maximum quantity of each food that can be bought is [10, 10, 10, 10, 10, 10, 10, 10]. The minimum required amount of each nutrient is [500, 400, 0, 0, 0, 1600]. The maximum allowed amount of each nutrient is [20000, 20000, 20000, 20000, 50000, 24000]. The amount of each nutrient contained in each food item is [[60, 20, 10, 15, 938, 295], [8, 0, 20, 20, 2180, 770], [8, 10, 15, 10, 945, 440], [40, 40, 35, 10, 278, 430], [15, 35, 15, 15, 1182, 315], [70, 30, 15, 15, 896, 400], [25, 50, 25, 15, 1329, 370], [60, 20, 15, 10, 1397, 450]].  For each nutrient with a minimum requirement, the total amount in the diet must be at least MinReqAmount_i. For each nutrient with a maximum requirement, the total amount in the diet must be at most MaxReqAmount_i. Amount of each food j to be bought is non-negative.  Minimize the total cost of buying foods to meet the nutritional requirements. "}
{"id": 19, "ground_truth": 25, "question": "The Car Selection Problem seeks to assign a certain number of participants to different cars, based on participants' interests in specific cars, with the goal of maximizing the total number of assignments. The Car Selection Problem is a mixed integer programming model that aims to assign ParticipantNum participants to CarNum cars in a way that maximizes the total number of assignments. Each participant is interested in a subset of cars, represented by InterestMatrix_{p,c}, where p and c index participants and cars, respectively. The objective is to find the optimal assignment of participants to cars that satisfies certain constraints. The total number of participants is 25. The total number of available cars is 25. A binary matrix indicating whether a participant is interested in a particular car (1 for interested and 0 for not interested) is [[0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1]].  Each participant is assigned to at most one car. A participant can only be assigned to a car if they are interested in that car (InterestMatrix_{p,c} = 1). The assignment of a participant to a car is a binary decision (either 0 or 1).  Maximize the total number of participant-to-car assignments. "}
